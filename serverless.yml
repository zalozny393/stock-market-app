service: stock-market-app
frameworkVersion: '3'

plugins:
  - serverless-appsync-plugin
  - serverless-appsync-simulator
  - serverless-offline
  - serverless-python-requirements

useDotenv: true

provider:
  name: aws
  runtime: python3.9
  environment:
    LOCAL_DEBUG: ${param:local_debug, 'false'}

custom:
  pythonRequirements:
    dockerizePip: true
    useStaticCache: false
    slim: true
    layer: true
  appSync:
    name: ${self:service}-${sls:stage}
    authenticationType: API_KEY
    apiKeys:
      - name: ui keys
        expiresAfter: 365d
    additionalAuthenticationProviders:
      - authenticationType: AMAZON_COGNITO_USER_POOLS
        userPoolConfig:
          userPoolId: !Ref CognitoUserPool
    mappingTemplates:
      - type: Query
        field: search
        dataSource: search
        request: false
        response: false
      - type: Query
        field: getStockOverview
        dataSource: getStockOverview
        request: false
        response: false
    dataSources:
      - type: AWS_LAMBDA
        name: search
        config:
          functionName: search
      - type: AWS_LAMBDA
        name: getStockOverview
        config:
          functionName: getStockOverview
  appsync-simulator:
    apiKey: 'da2-fakeApiId123456'
	
package:
  individually: false
  patterns:
    - '!**'
    - './src/**'

functions:
  getStockOverview:
    handler: src/stock_overview.handle_request
    layers:
      - Ref: PythonRequirementsLambdaLayer
  search:
    handler: src/search.handle_request

resources:
  Resources:
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UsernameAttributes:
          - "email"
        UserPoolName: ${self:service}-${sls:stage}
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: "web"
        UserPoolId: !Ref CognitoUserPool